{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../commons.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/icon\";\nconst _c0 = [\"search\"];\nfunction DropdownComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r0.selectFormControl.value.length, \" \", \" Selected\", \" \");\n  }\n}\nfunction DropdownComponent_mat_icon_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-icon\", 10);\n    i0.ɵɵlistener(\"click\", function DropdownComponent_mat_icon_9_Template_mat_icon_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.clearSearch($event));\n    });\n    i0.ɵɵtext(1, \"close\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DropdownComponent_mat_optgroup_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\")(1, \"div\");\n    i0.ɵɵtext(2, \"No results found!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DropdownComponent_mat_optgroup_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-optgroup\")(1, \"a\", 11);\n    i0.ɵɵlistener(\"click\", function DropdownComponent_mat_optgroup_12_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.selectAll());\n    });\n    i0.ɵɵtext(2, \"Select All\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" \\u00A0/\\u00A0 \");\n    i0.ɵɵelementStart(4, \"a\", 11);\n    i0.ɵɵlistener(\"click\", function DropdownComponent_mat_optgroup_12_Template_a_click_4_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.deselectAll());\n    });\n    i0.ɵɵtext(5, \"Deselect All\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DropdownComponent_mat_optgroup_14_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵlistener(\"onSelectionChange\", function DropdownComponent_mat_optgroup_14_mat_option_2_Template_mat_option_onSelectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.selectionChange($event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const pokemon_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", pokemon_r13.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", pokemon_r13.viewValue, \" \");\n  }\n}\nfunction DropdownComponent_mat_optgroup_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-optgroup\", 12);\n    i0.ɵɵpipe(1, \"uppercase\");\n    i0.ɵɵtemplate(2, DropdownComponent_mat_optgroup_14_mat_option_2_Template, 2, 2, \"mat-option\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const group_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"label\", i0.ɵɵpipeBind1(1, 3, group_r11.name))(\"disabled\", group_r11.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", group_r11.pokemon);\n  }\n}\nexport let DropdownComponent = /*#__PURE__*/(() => {\n  class DropdownComponent {\n    constructor(commons, differs) {\n      this.commons = commons;\n      this.differs = differs;\n      this.updateSelection = new EventEmitter();\n      this.selectFormControl = new UntypedFormControl();\n      this.searchTextboxControl = new UntypedFormControl();\n      this.selectedValues = [];\n      //pokemonControl = new FormControl();\n      this.data = [];\n      /**\r\n       * Used to filter data based on search input\r\n       */\n      this.filteredList = [];\n      this.differ = differs.find({}).create();\n      this.groupdiffer = differs.find({}).create();\n    }\n    ngDoCheck() {\n      let changes = this.differ.diff(this.nodeIdMap);\n      if (changes) {\n        //console.log('changes detected');\n        // changes.forEachChangedItem(r => console.log(r,' changed ', r.currentValue));\n        // changes.forEachAddedItem(r => console.log(r,' added ' + r.currentValue));\n        // changes.forEachRemovedItem(r => console.log(r,' removed ' + r.currentValue));\n        changes.forEachChangedItem(r => {\n          if (r.currentValue) {\n            this.selectedValues.push(r.key);\n            this.selectFormControl.patchValue(this.selectedValues);\n          } else {\n            this.selectedValues.splice(this.selectedValues.indexOf(r.key), 1);\n            this.selectFormControl.patchValue(this.selectedValues);\n          }\n        });\n      } else {\n        //console.log('nothing changed');\n      }\n      let groupchanges = this.groupdiffer.diff(this.nodeTypeVisibilityMap);\n      if (groupchanges) {\n        console.log('changes detected');\n        // changes.forEachChangedItem(r => console.log(r,' changed ', r.currentValue));\n        // changes.forEachAddedItem(r => console.log(r,' added ' + r.currentValue));\n        // changes.forEachRemovedItem(r => console.log(r,' removed ' + r.currentValue));\n        groupchanges.forEachChangedItem(r => {\n          this.data.forEach(group => {\n            if (group.name == r.key) {\n              group.disabled = !r.currentValue;\n            }\n          });\n        });\n      } else {\n        //console.log('nothing changed');\n      }\n    }\n    ngOnChanges(changes) {\n      if (changes.masterMap) {\n        console.log('prev value: ', changes.masterMap.previousValue);\n        console.log('got item: ', changes.masterMap.currentValue);\n        this.processMasterMap(changes.masterMap.currentValue);\n      }\n    }\n    processMasterMap(newVal) {\n      let typeList = [];\n      let idList = [];\n      let newData = [];\n      for (let key in newVal) {\n        idList.push(key);\n        if (typeList.indexOf(this.commons.getNodeTypeById(key)) == -1) {\n          typeList.push(this.commons.getNodeTypeById(key));\n          newData.push({\n            name: this.commons.getNodeTypeById(key),\n            pokemon: []\n          });\n        }\n      }\n      idList.sort();\n      for (let key in newVal) {\n        newData.forEach(typeobj => {\n          if (typeobj.name == this.commons.getNodeTypeById(key)) {\n            typeobj.pokemon.push({\n              value: key,\n              viewValue: newVal[key].name\n            });\n          }\n        });\n      }\n      this.data = newData;\n    }\n    // PokemonGroup[] = [\n    //   {\n    //     name: 'Grass',\n    //     pokemon: [\n    //       {value: 'bulbasaur-0', viewValue: 'Bulbasaur'},\n    //       {value: 'oddish-1', viewValue: 'Oddish'},\n    //       {value: 'bellsprout-2', viewValue: 'Bellsprout'}\n    //     ]\n    //   },\n    //   {\n    //     name: 'Water',\n    //     pokemon: [\n    //       {value: 'squirtle-3', viewValue: 'Squirtle'},\n    //       {value: 'psyduck-4', viewValue: 'Psyduck'},\n    //       {value: 'horsea-5', viewValue: 'Horsea'}\n    //     ]\n    //   },\n    //   {\n    //     name: 'Fire',\n    //     // disabled: true,\n    //     pokemon: [\n    //       {value: 'charmander-6', viewValue: 'Charmander'},\n    //       {value: 'vulpix-7', viewValue: 'Vulpix'},\n    //       {value: 'flareon-8', viewValue: 'Flareon'}\n    //     ]\n    //   },\n    //   {\n    //     name: 'Psychic',\n    //     pokemon: [\n    //       {value: 'mew-9', viewValue: 'Mew'},\n    //       {value: 'mewtwo-10', viewValue: 'Mewtwo'},\n    //     ]\n    //   }\n    // ];\n    ngOnInit() {\n      /**\r\n       * Set filter event based on value changes\r\n       */\n      this.filteredOptions = this.searchTextboxControl.valueChanges.pipe(startWith(''), map(name => this._filter(name)));\n    }\n    _filter(name) {\n      const filterValue = name.toLowerCase();\n      // Set selected values to retain the selected checkbox state \n      this.setSelectedValues();\n      this.selectFormControl.patchValue(this.selectedValues);\n      //let filteredList = this.data.filter(option => option.toLowerCase().indexOf(filterValue) !== -1);\n      let newList = [];\n      this.data.forEach(group => {\n        let tmp = {\n          name: group.name,\n          pokemon: [],\n          disabled: group.disabled\n        };\n        group.pokemon.forEach(mon => {\n          if (group.name.toLowerCase().indexOf(name.toLowerCase()) != -1 || mon.viewValue.toLowerCase().indexOf(name.toLowerCase()) != -1 || mon.value.toLowerCase().indexOf(name.toLowerCase()) != -1) {\n            tmp.pokemon.push(mon);\n          }\n        });\n        if (tmp.pokemon.length > 0) {\n          newList.push(tmp);\n        }\n      });\n      this.filteredList = newList;\n      return this.filteredList;\n    }\n    /**\r\n     * Remove from selected values based on uncheck\r\n     */\n    deselectAll() {\n      console.log(this.filteredList);\n      this.filteredList.forEach(opt => {\n        if (!opt.disabled) {\n          opt.pokemon.forEach(searchedNode => {\n            console.log(searchedNode);\n            if (this.selectedValues.indexOf(searchedNode.value) != -1) {\n              //let index = this.selectedValues.indexOf(searchedNode.value);\n              //this.selectedValues.splice(index, 1)\n              this.updateSelection.emit({\n                id: searchedNode.value,\n                selected: false\n              });\n              //this.selectFormControl.patchValue(this.selectedValues);\n            }\n          });\n        }\n      });\n      this.searchTextboxControl.patchValue(this.searchTextboxControl.value);\n    }\n    selectAll() {\n      console.log(this.filteredList);\n      this.filteredList.forEach(opt => {\n        if (!opt.disabled) {\n          opt.pokemon.forEach(searchedNode => {\n            console.log(searchedNode);\n            if (this.selectedValues.indexOf(searchedNode.value) == -1) {\n              //this.selectedValues.push(searchedNode.value);\n              this.updateSelection.emit({\n                id: searchedNode.value,\n                selected: true\n              });\n              //this.selectFormControl.patchValue(this.selectedValues);\n            }\n          });\n        }\n      });\n      this.searchTextboxControl.patchValue(this.searchTextboxControl.value);\n    }\n    selectionChange(event) {\n      if (event.source.value == 'all') {\n        // if (event.isUserInput){\n        //   if(event.source.selected == false) {\n        //     this.filteredList.forEach(opt=>{\n        //       opt.pokemon.forEach(searchedNode=>{\n        //         let index = this.selectedValues.indexOf(searchedNode.id);\n        //         this.selectedValues.splice(index, 1)\n        //       })\n        //     })\n        //     // let index = this.selectedValues.indexOf(event.source.value);\n        //     // this.selectedValues.splice(index, 1)\n        //   }\n        //   else if(event.source.selected == true){\n        //     this.filteredList.forEach(opt=>{\n        //       opt.pokemon.forEach(searchedNode=>{\n        //         this.updateSelection.emit({id:searchedNode.value,selected:true})\n        //         if(this.selectedValues.indexOf(searchedNode.value)==-1){\n        //           this.selectedValues.push(searchedNode.value)\n        //         }\n        //       })\n        //     })\n        //   }\n        //   // this.updateSelection.emit({id:event.source.value,selected:event.source.selected})\n        // }\n      } else {\n        if (event.isUserInput) {\n          if (event.source.selected == false) {\n            let index = this.selectedValues.indexOf(event.source.value);\n            this.selectedValues.splice(index, 1);\n          } else if (event.source.selected == true) {}\n          this.updateSelection.emit({\n            id: event.source.value,\n            selected: event.source.selected\n          });\n        }\n      }\n    }\n    openedChange(e) {\n      // Set search textbox value as empty while opening selectbox \n      this.searchTextboxControl.patchValue('');\n      // Focus to search textbox while clicking on selectbox\n      if (e == true) {\n        this.searchTextBox.nativeElement.focus();\n      }\n    }\n    /**\r\n     * Clearing search textbox value\r\n     */\n    clearSearch(event) {\n      event.stopPropagation();\n      this.searchTextboxControl.patchValue('');\n    }\n    /**\r\n     * Set selected values to retain the state\r\n     */\n    setSelectedValues() {\n      console.log('selectFormControl', this.selectFormControl.value);\n      if (this.selectFormControl.value && this.selectFormControl.value.length > 0) {\n        this.selectFormControl.value.forEach(e => {\n          if (this.selectedValues.indexOf(e) == -1) {\n            this.selectedValues.push(e);\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function DropdownComponent_Factory(t) {\n      return new (t || DropdownComponent)(i0.ɵɵdirectiveInject(i1.CommonsService), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DropdownComponent,\n      selectors: [[\"app-dropdown\"]],\n      viewQuery: function DropdownComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchTextBox = _t.first);\n        }\n      },\n      inputs: {\n        masterMap: \"masterMap\",\n        nodeIdMap: \"nodeIdMap\",\n        nodeTypeVisibilityMap: \"nodeTypeVisibilityMap\"\n      },\n      outputs: {\n        updateSelection: \"updateSelection\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 16,\n      vars: 13,\n      consts: [[2, \"min-width\", \"calc(100% - 80px)\", \"padding-left\", \"12px\"], [\"placeholder\", \"Add Nodes\", \"multiple\", \"\", 3, \"formControl\", \"openedChange\"], [\"class\", \"additional-selection\", \"style\", \"padding-left: 8px;\", 4, \"ngIf\"], [1, \"select-container\"], [\"autocomplete\", \"off\", \"placeholder\", \"Search\", \"aria-label\", \"Search\", \"matInput\", \"\", 3, \"formControl\"], [\"search\", \"\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"label\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [1, \"additional-selection\", 2, \"padding-left\", \"8px\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [3, \"label\", \"disabled\"], [3, \"value\", \"onSelectionChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"onSelectionChange\"]],\n      template: function DropdownComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"mat-select\", 1);\n          i0.ɵɵlistener(\"openedChange\", function DropdownComponent_Template_mat_select_openedChange_1_listener($event) {\n            return ctx.openedChange($event);\n          });\n          i0.ɵɵelementStart(2, \"mat-select-trigger\");\n          i0.ɵɵtemplate(3, DropdownComponent_span_3_Template, 2, 2, \"span\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"mat-optgroup\")(6, \"mat-form-field\");\n          i0.ɵɵelement(7, \"input\", 4, 5);\n          i0.ɵɵtemplate(9, DropdownComponent_mat_icon_9_Template, 2, 0, \"mat-icon\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(10, DropdownComponent_mat_optgroup_10_Template, 3, 0, \"mat-optgroup\", 7);\n          i0.ɵɵpipe(11, \"async\");\n          i0.ɵɵtemplate(12, DropdownComponent_mat_optgroup_12_Template, 6, 0, \"mat-optgroup\", 7);\n          i0.ɵɵpipe(13, \"async\");\n          i0.ɵɵtemplate(14, DropdownComponent_mat_optgroup_14_Template, 3, 5, \"mat-optgroup\", 8);\n          i0.ɵɵpipe(15, \"async\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(8);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"formControl\", ctx.selectFormControl);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", (ctx.selectFormControl.value == null ? null : ctx.selectFormControl.value.length) > 0);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formControl\", ctx.searchTextboxControl);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", _r1.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(11, 7, ctx.filteredOptions).length == 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(13, 9, ctx.filteredOptions).length > 0);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 11, ctx.filteredOptions));\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i4.MatFormField, i4.MatSuffix, i5.MatInput, i6.MatSelect, i6.MatSelectTrigger, i7.MatOption, i7.MatOptgroup, i8.MatIcon, i2.AsyncPipe, i2.UpperCasePipe],\n      styles: [\".additional-selection[_ngcontent-%COMP%]{opacity:.75}.select-container[_ngcontent-%COMP%]{margin-top:10px}\"]\n    });\n  }\n  return DropdownComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}