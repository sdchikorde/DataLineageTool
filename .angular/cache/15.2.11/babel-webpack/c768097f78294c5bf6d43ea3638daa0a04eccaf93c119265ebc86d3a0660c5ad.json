{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CommonsService = /*#__PURE__*/(() => {\n  class CommonsService {\n    constructor() {\n      this.systems = [{\n        \"id\": \"sys000001\",\n        \"name\": \"SYS Origin\",\n        \"icto\": \"\",\n        \"region\": \"\",\n        \"poc\": [\"dummy1@gmail.com\"]\n      }, {\n        \"id\": \"sys000002\",\n        \"name\": \"SYS Consumer\",\n        \"icto\": \"\",\n        \"region\": \"\",\n        \"poc\": [\"dummy2@gmail.com\"]\n      }];\n      this.feeds = [{\n        \"id\": \"fed000001\",\n        \"name\": \"Sample Inbound feed\",\n        \"direction\": \"inbound\",\n        \"description\": \"\",\n        \"filenameregex\": \"^sample_in.*$\",\n        \"filenamesample\": \"\",\n        \"gensysref\": \"sys000001\",\n        \"consysref\": [],\n        \"attributes\": \"\"\n      }, {\n        \"id\": \"fed000002\",\n        \"name\": \"Sample Extract Feed\",\n        \"direction\": \"outbound\",\n        \"description\": \"\",\n        \"filenameregex\": \"^extract_sample.*$\",\n        \"filenamesample\": \"\",\n        \"gensysref\": \"\",\n        \"consysref\": [\"sys000002\"],\n        \"attributes\": \"\"\n      }];\n      this.operations = [{\n        \"id\": \"opr000001\",\n        \"name\": \"Ingestion of Sample inbound feed\",\n        \"type\": \"Ingestion\",\n        \"description\": \"Ingestion operation\",\n        \"jobname\": \"\",\n        \"jobdatacenter\": \"\",\n        \"frequency\": \"\",\n        \"feedref\": \"fed000001\",\n        \"tblviewref\": [],\n        \"outputtblref\": \"tbl000001\",\n        \"outputfeedref\": null,\n        \"filter\": \"\",\n        \"aggregate\": \"\",\n        \"transpose\": \"\"\n      }, {\n        \"id\": \"opr000002\",\n        \"name\": \"Transformation of sample feed data\",\n        \"type\": \"Transformation\",\n        \"description\": \"Transform operation\",\n        \"jobname\": \"\",\n        \"jobdatacenter\": \"\",\n        \"frequency\": \"\",\n        \"feedref\": \"\",\n        \"tblviewref\": [\"tbl000001\"],\n        \"outputtblref\": \"tbl000002\",\n        \"outputfeedref\": null,\n        \"filter\": \"\",\n        \"aggregate\": \"\",\n        \"transpose\": \"\"\n      }, {\n        \"id\": \"opr000003\",\n        \"name\": \"Extraction of outbound feed\",\n        \"type\": \"Extraction\",\n        \"description\": \"Extract operation\",\n        \"jobname\": \"\",\n        \"jobdatacenter\": \"\",\n        \"frequency\": \"\",\n        \"feedref\": \"\",\n        \"tblviewref\": [\"viw000001\"],\n        \"outputtblref\": \"\",\n        \"outputfeedref\": \"fed000002\",\n        \"filter\": \"\",\n        \"aggregate\": \"\",\n        \"transpose\": \"\"\n      }];\n      this.tables = [{\n        \"id\": \"tbl000001\",\n        \"name\": \"staging_table\",\n        \"schema\": \"myschema\",\n        \"db\": \"mydb\",\n        \"partitionInfo\": \"\",\n        \"attributes\": \"\"\n      }, {\n        \"id\": \"tbl000002\",\n        \"name\": \"final table\",\n        \"schema\": \"myschema\",\n        \"db\": \"mydb\",\n        \"partitionInfo\": \"\",\n        \"attributes\": \"\"\n      }];\n      this.views = [{\n        \"id\": \"viw000001\",\n        \"name\": \"sample_view\",\n        \"schema\": \"myschema\",\n        \"db\": \"mydb\",\n        \"tblviewref\": [\"tbl000002\"],\n        \"attributes\": \"\"\n      }];\n    }\n    getNodeTypeById(id) {\n      if (id.startsWith(\"sys\")) {\n        return \"system\";\n      } else if (id.startsWith(\"fed\")) {\n        return \"feed\";\n      } else if (id.startsWith(\"tbl\")) {\n        return \"table\";\n      } else if (id.startsWith(\"opr\")) {\n        return \"operation\";\n      } else if (id.startsWith(\"viw\")) {\n        return \"view\";\n      }\n    }\n    static #_ = this.ɵfac = function CommonsService_Factory(t) {\n      return new (t || CommonsService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CommonsService,\n      factory: CommonsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CommonsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}